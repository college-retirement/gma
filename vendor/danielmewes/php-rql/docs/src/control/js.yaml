commands:
  - tag: js
    section: control
    order: 5
    description: Create a javascript expression.

    body:
      js: "$PARENT.js(jsString)"
      py: "$PARENT.js(js_string)"
      rb: "$PARENT.js(js_string)"
      ph: "$PARENT->js(jsString[, timeout])"

    io:
      - - r
        - value

    examples:
      - description: Concatenate two strings using Javascript'
        code:
          py: r.js("'str1' + 'str2'").run(conn)
          rb: r.js("'str1' + 'str2'").run(conn)
          js: r.js("'str1' + 'str2'").run(conn, callback)
          ph: r\js("'str1' + 'str2'")->run($conn);
      - description: Select all documents where the 'magazines' field is greater
          than 5 by running Javascript on the server.
        code:
          py: |-
            r.table('marvel').filter(
              r.js('(function (row) { return row.magazines > 5; })')).run(conn)
          rb: |-
            r.table('marvel').filter(
              r.js('(function (row) { return row.magazines > 5; })')).run(conn)
          js: |-
            r.table('marvel').filter(
              r.js('(function (row) { return row.magazines > 5; })')).run(conn, callback)
          ph: |
            r\table('marvel')->filter(
              r\js('(function (row) { return row.magazines > 5; })'))->run($conn);
      - description: You may also specify a timeout in seconds (defaults to 5).
        code:
          py: r.js('while(true) {}', timeout=1.3).run(conn)
          rb: r.js('while(true) {}', :timeout => 1.3).run(conn)
          js: r.js('while(true) {}', {timeout:1.3}).run(conn, callback)
          ph: r\js('while(true) {}', 1.3)->run($conn);

