commands:
  - tag: do
    section: control
    order: 0
    description: | 
      Evaluate the <code>expr</code> in the context of one or more value
      bindings.<br /><br />
      The type of the result is the type of the value returned from <code>expr</code>.

    body:
      py:  "$PARENT.do(arg [, args]*, expr)"
      js:  "$PARENT.do(arg [, args]*, expr)"
      rb:  "$PARENT.do(arg [, args]*) {expr}"
      ph:  "$PARENT->rDo(arg, expr) | $PARENT->rDo(array(arg1, arg2, ...), expr)"
      
    ph:
      name: rDo

    io:
      - - any
        - any

    examples:
      - description: The object(s) passed to do() can be bound to name(s). The
          last argument is the expression to evaluate in the context of the bindings.
        code:
          js: |-
            r.do(r.table('marvel').get('IronMan'),
                 function (ironman) { return ironman('name'); }
            ).run(conn, callback)
          py: |-
            r.do(r.table('marvel').get('IronMan'),
                 lambda ironman: ironman['name']).run(conn)
          rb: r.do(r.table('marvel').get('IronMan')) { |ironman| ironman[:name] }.run(conn)
          ph: |
            r\rDo(r\table('marvel')->get('IronMan'),
                function ($ironman) { return $ironman('name'); })->run($conn);

