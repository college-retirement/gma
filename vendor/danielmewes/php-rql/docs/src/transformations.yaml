sections:
  - tag: transformations
    name: Transformations
    description: These commands are used to transform data in a sequence.
    order: 6

commands:
  - tag: map
    section: transformations
    description: Transform each element of the sequence by applying the given mapping
      function.

    body:
      js: "$PARENT.map(mappingFunction)"
      py: "$PARENT.map(mapping_function)"
      rb: "$PARENT.map(mapping_function)"
      ph: "$PARENT->map(mappingFunction)"

    io:
      - - sequence
        - stream
      - - array
        - array

    examples:
      - description: Construct a sequence of hero power ratings.
        code:
          js: |-
            r.table('marvel').map(function(hero) {
             return hero('combatPower').add(hero('compassionPower').mul(2))
            }).run(conn, callback)
          py: |-
            r.table('marvel').map(
                lambda hero: hero['combatPower'] + hero['compassionPower'] * 2).run(conn)
          rb: |-
            r.table('marvel').map {|hero|
             hero[:combat_power] + hero[:compassion_power] * 2
            }.run(conn)
          ph: |
            r\table('marvel')->map(function($hero) {
                return $hero('combatPower')->add($hero('compassionPower')->mul(2));
              })->run($conn);

  - tag: with_fields
    section: transformations
    description: Takes a sequence of objects and a list of fields.  If any objects in the sequence don't have all of the specified fields, they're dropped from the sequence.  The remaining objects have the specified fields plucked out.  (This is identical to `has_fields` followed by `pluck` on a sequence.)

    name:
      js: withFields
      py: with_fields
      rb: with_fields
      ph: withFields

    body:
      js: "$PARENT.withFields([selector1, selector2...])"
      py: "$PARENT.with_selectors([selector1, selector2...])"
      rb: "$PARENT.with_selectors([selector1, selector2...])"
      ph: "$PARENT->withFields(selector) | $PARENT->withFields(array(selector1, selector2, ...))"

    io:
      - - sequence
        - stream
      - - array
        - array

    examples:
      - description: Get a list of heroes and their nemeses, excluding any heroes that lack one.
        code:
          rb: r.table('marvel').with_fields('id', 'nemesis')
          py: r.table('marvel').with_fields('id', 'nemesis')
          js: r.table('marvel').withFields('id', 'nemesis')
          ph: r\table('marvel')->withFields(array('id', 'nemesis'))->run($conn);
      - description: Get a list of heroes and their nemeses, excluding any heroes whose nemesis isn't in an evil organization.
        code:
          rb: "r.table('marvel').with_fields(:id, {:nemesis => {:evil_organization => true}})"
          py: "r.table('marvel').with_fields('id', {'nemesis' : {'evil_organization' : True}})"
          js: "r.table('marvel').withFields('id', {'nemesis' : {'evil_organization' : true}})"
          ph: "r\\table('marvel')->withFields(array('id', 'nemesis' => array('evil_organization' => true)))->run($conn);"
      - description: The nested syntax can quickly become overly verbose so there's a shorthand.
        code:
          rb: "r.table('marvel').with_fields(:id, {:nemesis => :evil_organization})"
          py: "r.table('marvel').with_fields('id', {'nemesis' : 'evil_organization'})"
          js: "r.table('marvel').withFields('id', {'nemesis' : 'evil_organization'})"
          ph: "r\\table('marvel')->withFields(array('id', 'nemesis' => 'evil_organization'))->run($conn);"

  - tag: concat_map
    section: transformations
    description: Flattens a sequence of arrays returned by the <code>mappingFunction</code>
      into a single sequence.

    name:
      js: concatMap
      py: concat_map
      rb: concat_map
      ph: concatMap

    body:
      js: "$PARENT.concatMap(mappingFunction)"
      py: "$PARENT.concat_map(mapping_function)"
      rb: "$PARENT.concat_map(mapping_function)"
      ph: "$PARENT->concatMap(mappingFunction)"

    io:
      - - sequence
        - stream 
      - - array
        - array

    examples:
      - description: Construct a sequence of all monsters defeated by Marvel heroes.
          Here the field 'defeatedMonsters' is a list that is concatenated to
          the sequence.
        code:
          js: |-
            r.table('marvel').concatMap(function(hero) {
              return hero('defeatedMonsters')
            }).run(conn, callback)
          py: "r.table('marvel').concat_map(lambda hero: hero['defeatedMonsters']).run(conn)"
          rb: |-
            r.table('marvel').concat_map {|hero|
              hero[:defeated_monsters]
            }.run(conn)
          ph: |
            r\table('marvel')->concatMap(function($hero) {
                return $hero('defeatedMonsters');
              })->run($conn);

  - tag: order_by
    section: transformations
    description: Sort the sequence by document values of the given key(s).<br /><br />
      <code>order by</code> defaults to ascending ordering. To explicitly specify
      the ordering, wrap the attribute with either <code>r.asc</code> or <code>r.desc</code>.

    name:
      js: orderBy
      py: order_by
      rb: order_by
      ph: orderBy

    body:
      js: "$PARENT.orderBy(key1, [key2...])"
      py: "$PARENT.order_by(key1, [key2...])"
      rb: "$PARENT.order_by(key1, [key2...])"
      ph: "$PARENT->orderBy(key) | $PARENT->orderBy(array(key1, key2, ...))"

    io:
      - - sequence
        - stream
      - - array
        - array

    examples:
      - description: Order our heroes by a series of performance metrics.
        code:
          js: r.table('marvel').orderBy('enemiesVanquished', 'damselsSaved').run(conn, callback)
          py: r.table('marvel').order_by('enemies_vanquished', 'damsels_saved').run(conn)
          rb: r.table('marvel').order_by(:enemies_vanquished, :damsels_saved).run(conn)
          ph: r\table('marvel')->orderBy(array('enemiesVanquished', 'damselsSaved'))->run($conn);
      - description: Indexes can be used to perform more efficient orderings.
          Notice that the index ordering always has highes precedence. Thus the
          following example is equivalent to the one above.
        code:
          js: "r.table('marvel').orderBy('damselsSaved', {index: 'enemiesVanquished'}).run(conn, callback)"
          py: r.table('marvel').order_by('damsels_saved', index='enemies_vanquished').run(conn)
          rb: r.table('marvel').order_by(:damsels_saved, :index => :enemies_vanquished).run(conn)
          ph: r\table('marvel')->orderBy(array('damselsSaved', 'index' => 'enemiesVanquished'))->run($conn);
      - description: You can also specify a descending order when using an index.
        code:
          js: "r.table('marvel').orderBy({index: r.desc('enemiesVanquished')}).run(conn, callback)"
          py: r.table('marvel').order_by(index=r.desc('enemies_vanquished')).run(conn)
          rb: r.table('marvel').order_by(:index => r.desc(:enemies_vanquished)).run(conn)
      - description: Let's lead with our best vanquishers by specify descending ordering.
        code:
          js: |-
            r.table('marvel').orderBy(r.desc('enemiesVanquished'), r.asc('damselsSaved'))
             .run(conn, callback)
          py: |-
            r.table('marvel').order_by(
                r.desc('enemies_vanquished'), r.asc('damsels_saved')).run(conn)
          rb: |-
            r.table('marvel').order_by(r.desc(:enemies_vanquished),
                                       r.asc(:damsels_saved)      ).run(conn)
          ph: |
            r\table('marvel')->orderBy(array(r\desc('enemiesVanquished'), r\asc('damselsSaved'))
              )->run($conn);
      - description: You can use a function for ordering instead of just selecting an attribute.
        code:
          js: r.table('marvel').orderBy(function (doc) { return doc('enemiesVanquished') + doc('damselsSaved'); }).run(conn, callback)
          py: "r.table('marvel').order_by(lambda doc: doc['enemiesVanquished'] + doc['ramselsSaved']).run(conn)"
          rb: r.table('marvel').order_by(lambda {|doc| doc[:enemiesVanquished] + doc[:damselsSaved]}).run(conn)
          ph: r\table('marvel')->orderBy(function ($doc) { return $doc('enemiesVanquished')->add($doc('damselsSaved')); })->run($conn);
      - description: Functions can also be used descendingly.
        code:
          js: r.table('marvel').orderBy(r.desc(function (doc) { return doc('enemiesVanquished') + doc('damselsSaved'); })).run(conn, callback)
          py: "r.table('marvel').order_by(r.desc(lambda doc: doc['enemiesVanquished'] + doc['ramselsSaved'])).run(conn)"
          rb: r.table('marvel').order_by(r.desc(lambda {|doc| doc[:enemiesVanquished] + doc[:damselsSaved]})).run(conn)
          ph: r\table('marvel')->orderBy(r\desc(function ($doc) { return $doc('enemiesVanquished')->add($doc('damselsSaved')); }))->run($conn);

  - tag: skip
    section: transformations
    description: Skip a number of elements from the head of the sequence.

    body: "$PARENT.skip(n)"
    
    ph:
      body: "$PARENT->skip(n)"

    io:
      - - sequence
        - stream 
      - - array
        - array

    examples:
      - description: Here in conjunction with `order_by` we choose to ignore the most
            successful heroes.
        code:
          js: r.table('marvel').orderBy('successMetric').skip(10).run(conn, callback)
          py: r.table('marvel').order_by('successMetric').skip(10).run(conn)
          rb: r.table('marvel').order_by(:success_metric).skip(10).run(conn)
          ph: r\table('marvel')->orderBy('successMetric')->skip(10)->run($conn);

  - tag: limit
    section: transformations
    description: End the sequence after the given number of elements.

    body: "$PARENT.limit(n)"
    
    ph:
      body: "$PARENT->limit(n)"

    io:
      - - sequence
        - stream
      - - array
        - array

    examples:
      - description: Only so many can fit in our Pantheon of heroes.
        code:
          js: r.table('marvel').orderBy('belovedness').limit(10).run(conn, callback)
          py: r.table('marvel').order_by('belovedness').limit(10).run(conn)
          rb: r.table('marvel').order_by(:belovedness).limit(10).run(conn)
          ph: r\table('marvel')->orderBy('belovedness')->limit(10)->run($conn);

  - tag: slice
    section: transformations
    description: Trim the sequence to within the bounds provided.

    name:
      py: "[]"
      rb: "[]"
      js: slice
      ph: slice

    body:
      js: "$PARENT.slice(startIndex[, endIndex])"
      py: "$PARENT[start_index[, end_index]]"
      rb: "$PARENT[start_index[, end_index]]"
      ph: "$PARENT->slice(startIndex[, endIndex])"

    io:
      - - sequence
        - stream
      - - array
        - array

    examples:
      - description: For this fight, we need heroes with a good mix of strength and agility.
        code:
          js: r.table('marvel').orderBy('strength').slice(5, 10).run(conn, callback)
          py: r.table('marvel').order_by('strength')[5:10].run(conn)
          rb: r.table('marvel').order_by(:strength)[5..10].run(conn)
          ph: r\table('marvel')->orderBy('strength')->slice(5, 10)->run($conn);

  - tag: nth
    section: transformations
    description: Get the nth element of a sequence.

    name:
      py: "[]"
      rb: "[]"
      js: nth
      ph: nth

    body:
      py: "$PARENT[index]"
      rb: "$PARENT[index]"
      js: "$PARENT.nth(index)"
      ph: "$PARENT->nth(index)"

    io:
      - - sequence
        - object

    examples:
      - description: Select the second element in the array.
        code:
          js: r.expr([1,2,3]).nth(1).run(conn, callback)
          py: r.expr([1,2,3])[1].run(conn)
          rb: r([1,2,3])[1].run(conn)
          ph: r\expr(array(1,2,3))->nth(1)->run($conn);

  - tag: indexes_of
    section: transformations
    description: Get the indexes of an element in a sequence. If the argument is a predicate,
      get the indexes of all elements matching it.

    name:
      js: indexesOf
      py: indexes_of
      rb: indexes_of
      ph: indexesOf

    body:
      js: "$PARENT.indexesOf(datum | predicate)"
      py: "$PARENT.indexes_of(datum | predicate)"
      rb: "$PARENT.indexes_of(datum | predicate)"
      ph: "$PARENT->indexesOf(datum | predicate)"

    io:
      - - sequence
        - array

    examples:
      - description: Find the position of the letter 'c'.
        code:
          js: r.expr(['a','b','c']).indexesOf('c').run(conn, callback)
          py: r.expr(['a','b','c']).indexes_of('c').run(conn)
          rb: r(['a','b','c']).indexes_of('c').run(conn)
          ph: r\expr(array('a','b','c'))->indexesOf('c')->run($conn);
      - description: Find the popularity ranking of invisible heroes.
        code:
          py: |-
            r.table('marvel').union(r.table('dc')).order_by('popularity').indexes_of(
              r.row['superpowers'].contains('invisibility')
            ).run(conn)
          js: |-
            r.table('marvel').union(r.table('dc')).orderBy('popularity').indexesOf(
              r.row('superpowers').contains('invisibility')
            ).run(conn, callback)
          rb: |-
            r.table('marvel').union(r.table('dc')).order_by(:popularity).indexes_of{
              |row| row[:superpowers].contains('invisibility')
            }.run(conn)
          ph: |-
            r\table('marvel')->union(r\table('dc'))->orderBy('popularity')->indexesOf(
                r\row('superpowers')->contains('invisibility')
              )->run($conn);

  - tag: is_empty
    section: transformations
    description: Test if a sequence is empty.

    name:
      js: isEmpty
      py: is_empty
      rb: is_empty
      ph: isEmpty

    body:
      js: "$PARENT.isEmpty()"
      py: "$PARENT.is_empty()"
      rb: "$PARENT.is_empty"
      ph: "$PARENT->isEmpty()"

    io:
      - - sequence
        - bool

    examples:
      - description: Are there any documents in the marvel table?
        code:
          js: r.table('marvel').isEmpty().run(conn, callback)
          py: r.table('marvel').is_empty().run(conn)
          rb: r.table('marvel').is_empty().run(conn)
          ph: r\table('marvel')->isEmpty()->run($conn);

  - tag: union
    section: transformations
    description: Concatenate two sequences.

    body: "$PARENT.union(sequence)"
    
    ph:
      body: "$PARENT->union(sequence)"

    io:
      - - sequence
        - array

    examples:
      - description: Construct a stream of all heroes.
        code:
          py: r.table('marvel').union(r.table('dc')).run(conn)
          rb: r.table('marvel').union(r.table('dc')).run(conn)
          js: r.table('marvel').union(r.table('dc')).run(conn, callback)
          ph: r\table('marvel')->union(r\table('dc'))->run($conn);

  - tag: sample
    section: transformations
    description: |
      Select a given number of elements from a sequence with uniform random
      distribution. Selection is done without replacement.

    body: "$PARENT.sample(number)"
    
    ph:
      body: "$PARENT->sample(number)"

    io:
      - - sequence
        - selection
      - - stream
        - array 
      - - array
        - array

    examples:
      - description: Select 3 random heroes.
        code:
          js: r.table('marvel').sample(3).run(conn, callback)
          rb: r.table('marvel').sample(3).run(conn)
          py: r.table('marvel').sample(3).run(conn)
          ph: r\table('marvel')->sample(3)->run($conn);

