sections:
  - tag: db_admin
    name: Manipulating databases
    description: These commands allow database manipulation.
    order: 1

commands:
  - tag: db_create
    section: db_admin
    description: |
      Create a database. A RethinkDB database is a collection of tables,
      similar to relational databases.<br /><br />If successful, the operation returns
      an object: <code>{created: 1}</code>. If a database with the same name already
      exists the operation throws <code>RqlRuntimeError</code>.<br/> Note:
      that you can only use alphanumeric characters and underscores for the database name.

    name:
      py: db_create
      rb: db_create
      js: dbCreate
      ph: dbCreate

    body:
      js: "$PARENT.dbCreate(dbName)"
      py: "$PARENT.db_create(db_name)"
      rb: "$PARENT.db_create(db_name)"
      ph: "$PARENT->dbCreate(dbName)"

    io:
      - - r 
        - object 

    examples:
      - description: Create a database named 'superheroes'.
        code:
          py: r.db_create('superheroes').run(conn)
          rb: r.db_create('superheroes').run(conn)
          js: r.dbCreate('superheroes').run(conn, callback)
          ph: r\dbCreate('superheroes')->run($conn);

  - tag: db_drop
    section: db_admin
    description: |
      Drop a database. The database, all its tables, and corresponding
      data will be deleted.<br /><br />If successful, the operation returns the object
      <code>{dropped: 1}</code>. If the specified database doesn't exist a <code>RqlRuntimeError</code>
      is thrown.

    name:
      py: db_drop
      rb: db_drop
      js: dbDrop
      ph: dbDrop

    body:
      py: "$PARENT.db_drop(db_name)"
      rb: "$PARENT.db_drop(db_name)"
      js: "$PARENT.dbDrop(dbName)"
      ph: "$PARENT->dbDrop(dbName)"

    io:
      - - r 
        - object 

    examples:
      - description: Drop a database named 'superheroes'.
        code:
          rb: r.db_drop('superheroes').run(conn)
          py: r.db_drop('superheroes').run(conn)
          js: r.dbDrop('superheroes').run(conn, callback)
          ph: r\dbDrop('superheroes')->run($conn);

  - tag: db_list
    section: db_admin
    description: | 
      List all database names in the system.<br /><br />
      The result is a list of strings.

    name:
      py: db_list
      rb: db_list
      js: dbList
      ph: dbList

    body:
      py: "$PARENT.db_list()"
      rb: "$PARENT.db_list"
      js: "$PARENT.dbList()"
      ph: "$PARENT->dbList()"

    io:
      - - r 
        - array

    examples:
      - description: List all databases.
        code:
          js: r.dbList().run(conn, callback)
          py: r.db_list().run(conn)
          rb: r.db_list.run(conn)
          ph: r\dbList()->run($conn);

