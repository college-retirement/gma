commands:
  - tag: delete
    section: writing_data
    order: 3
    description: |
      Delete one or more documents from a table.  The optional argument <code>return_vals</code> will return the old value of the row you're deleting when set to true (only valid for single-row deletes).  The optional argument
      <code>durability</code> with value <code>'hard'</code> or
      <code>'soft'</code> will override the table or query's default
      durability setting.<br/><br/>
      Delete returns an object that contains the following attributes:
      <ul>
      <li><code>deleted</code> - the number of documents that were deleted;</li>
      <li><code>skipped</code> - the number of documents from the selection that were left unmodified
      because there was nothing to do. For example, if you delete a row that has already been deleted,
      that row will be skipped;</li>
      <li><code>errors</code> - the number of errors encountered while deleting;</li>
      <li>if errors occured, <code>first_error</code> contains the text of the first error;</li>
      <li><code>inserted</code>, <code>replaced</code>, and <code>unchanged</code> - all
      <code>0</code> for a <code>delete</code> operation.</li>
      </ul>

    body:
      js: "$PARENT.delete([{durability: 'soft', return_vals: true}])"
      py: "$PARENT.delete([durability='soft', return_vals=true])"
      rb: "$PARENT.delete[({:durability => soft, :return_vals => true})]"
      ph: "$PARENT->delete(array('durability' => 'soft', 'return_vals' => true)])"

    io:
      - - table
        - object
      - - selection
        - object
      - - singleSelection
        - object

    examples:
      - description: Delete superman from the database.
        code:
          js: r.table('marvel').get('superman').delete().run(conn, callback)
          py: r.table('marvel').get('superman').delete().run(conn)
          rb: r.table('marvel').get('superman').delete.run(conn)
          ph: r\table('marvel')->get('superman')->delete()->run($conn);
      - description: Delete every document from the table 'marvel'.  Also, don't wait for the operation to be flushed to disk.
        code:
          js: |
            r.table('marvel').delete({durability: 'soft'}).run(conn, callback)
          py: r.table('marvel').delete(durability='soft').run(conn)
          rb: r.table('marvel').delete(:durability => 'soft').run(conn)
          ph: r\table('marvel')->delete(array('durability' => 'soft'))->run($conn);
      - description: You can get back a copy of the row you delete from the database as well.
        code:
          js: |
            r.table('marvel').delete({return_vals: true}).run(conn, callback)
          py: r.table('marvel').delete(return_vals=True).run(conn)
          rb: r.table('marvel').delete(:return_vals => true).run(conn)
          ph: r\table('marvel')->delete(array('return_vals' => true))->run($conn);

