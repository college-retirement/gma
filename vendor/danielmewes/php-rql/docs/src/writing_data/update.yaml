commands:
  - tag: update
    section: writing_data
    order: 1
    description: |
      Update JSON documents in a table. Accepts a JSON document, a RQL
      expression, or a combination of the two.  The optional argument
      <code>durability</code> with value <code>'hard'</code> or
      <code>'soft'</code> will override the table or query's default
      durability setting.  The optional argument <code>return_vals</code> will return the old and new values of the row you're modifying when set to true (only valid for single-row updates).  The optional argument
      <code>non_atomic</code> lets you permit non-atomic updates.<br/><br/>
      Update returns an object that contains the following attributes:
      <ul>
      <li><code>replaced</code> - the number of documents that were updated;</li>
      <li><code>unchanged</code> - the number of documents that would have been modified
      except the new value was the same as the old value;</li>
      <li><code>skipped</code> - the number of documents that were left unmodified because
      there was nothing to do: either the row didn't exist or the new value is null;</li>
      <li><code>errors</code> - the number of errors encountered while performing the update;</li>
      <li>if errors occured, <code>first_error</code> contains the text of the first error;</li>
      <li><code>deleted</code> and  <code>inserted</code>
      - <code>0</code> for an <code>update</code> operation.</li>
      </ul>

    body:
      js: "$PARENT.update(json | expr[, {durability: 'soft', return_vals: true])"
      py: "$PARENT.update(json | expr[, durability='soft', return_vals=true])"
      rb: "$PARENT.update(json | expr[, durability => 'soft', return_vals => true])"
      ph: "$PARENT->update(json | expr[, array('durability' => 'soft', 'return_vals' => true)])"

    io:
      - - table
        - object
      - - selection
        - object
      - - singleSelection
        - object

    examples:
      - description: |
          Update Superman's age to 30. If attribute 'age' doesn't
          exist, adds it to the document.
        code:
          js: "r.table('marvel').get('superman').update({ age: 30 }).run(conn, callback)"
          py: "r.table('marvel').get('superman').update({ 'age': 30 }).run(conn)"
          rb: r.table('marvel').get('superman').update{ {:age => 30} }.run(conn)
          ph: r\table('marvel')->get('superman')->update( array('age' => 30) )->run($conn);
      - description: |
          Increment every superhero's age. If age doesn't exist, throws an error.  Specify soft durability.
        code:
          js: "r.table('marvel').update({ age: r.row('age').add(1) }, { durability: 'soft' }).run(conn, callback)"
          py: "r.table('marvel').update(lambda x: {'age': x['age'] + 1}, durability='soft').run(conn)"
          rb: r.table('marvel').update(:durability => 'soft') {|hero| {:age => hero[:age] + 1}}.run(conn)
          ph: |
            r\table('marvel')->update(array( 'age' => r\row('age')->add(1) ),
              array('durability' => 'soft'))->run($conn);
      - description: Allow the server to run non-atomic operations.
        code:
          js: |
            r.table('marvel').update(
              { age: r.row('age').add(r.js('1')) },
              {'nonAtomic':true}
            ).run(conn, callback)
          py: |
            r.table('marvel').update(
                lambda x: {'age': x['age'] + r.js('1')}, non_atomic=True).run(conn)
          rb: |
            r.table('marvel').update({ :non_atomic => true }) {|hero| {:age => hero[:age] + r.js('1')}
             }.run(conn)
          ph: |
            r\table('marvel')->update(
              array( 'age' => r\row('age')->add(r\js('1')) ),
              array('non_atomic' => true))->run($conn);
      - description: You can get back a copy of the original row and the update row using the return_vals flag.
        code:
          js: "r.table('marvel').get('superman').update({ age: 30 }, {return_vals: true}).run(conn, callback)"
          py: "r.table('marvel').get('superman').update({ 'age': 30 }, return_vals=True).run(conn)"
          rb: r.table('marvel').get('superman').update( {:age => 30}, :return_vals => true).run(conn)
          ph: r\table('marvel')->get('superman')->update( array('age' => 30), array('return_vals' => true) )->run($conn);
